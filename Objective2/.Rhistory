rates<-ts(ExchangeUSD$`USD/EUR`,start = c(2011,10), frequency = 365.25)
rates<-ts(ExchangeUSD$`USD/EUR`,start = c(2011,10), frequency = 365.25)
rates
rates<-ts(ExchangeUSD$`USD/EUR`,frequency = 365.25, start = c(2011,10))
rates
rates<-ts(usdRates,frequency = 365.25, start = c(2011,10))
rates<-ts(usdRates, frequency = 365.25, start = c(2011,10))
rates<-ts(ExchangeUSD, frequency = 365.25, start = c(2011,10))
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 365.25, start = c(2011,10))
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 365.25, start = c(2011,10))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 365, start = c(2011,10))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 12, start = c(2011,10))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 7, start = c(2011,10))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = "daily", start = c(2011,10))
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 7, start = c(2011,10))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 365.25, start = c(2011,10,13))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 500, start = c(2011,10,13))
rates
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(5,365.25), start = decimal_date(as.Date("2011-10-13")))
library(lubridate)
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(5,365.25), start = decimal_date(as.Date("2011-10-13")))
rates
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(7,365.25), start = decimal_date(as.Date("2011-10-13")))
rates
#rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(7,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
#rates
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10), frequency=365.25)
ts_data2
plot(ts_data2)
#view specific day
ts_data["2011-10-13",]
ts_data2
plot(ts_data2)
#rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(2,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
#rates
ts_data2
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(2,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
rates
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(42,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
rates
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(7,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
rates
rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(12,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
rates
#rates<-msts(ExchangeUSD$`USD/EUR`, seasonal.periods = c(12,365.25), start = decimal_date(as.Date("2011-10-13")))
#   frequency = 500, start = c(2011,10,13))
#rates
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10), frequency=500)
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10), frequency=365)
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10), frequency=12)
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), frequency=365)
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), frequency=365,25)
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), frequency=12,365.25)
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), end = c(2013,10,9))
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), end = c(2013,10,9))
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), end = c(2013,10,9), frequency = 1)
ts_data2
ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), end = c(2013,10,9), frequency = 365)
ts_data2
experiment <- msts(ExchangeUSD$`USD/EUR`, seasonal.periods=c(48,336))
experiment
experiment <- msts(ExchangeUSD$`USD/EUR`, seasonal.periods=c(7,365.25))
experiment
experiment <- msts(ExchangeUSD$`USD/EUR`, seasonal.periods=c(48,336))
experiment
experiment.fit <- tbats(experiment)
plot(forecast(experiment.fit)
experiment.fit <- tbats(experiment)
experiment.fit <- tbats(experiment)
plot(forecast(experiment.fit)
plot(forecast(experiment.fit))
??tbats
acf(log(xts_data))
acf(log(ts_data2))
acf(log(xts_data))
acf(log(ts_data2))
ts_data2
plot(ts_data2)
#library(lubridate)
#n as in 500 data
#n <- 500
#head(ExchangeUSD)
#assign last column with rates to vector x
#x <- ExchangeUSD$`USD/EUR`
#dates <- date(("2013-10-09"):(n-1))
plot(xts_data)
acf(log(xts_data))
plot(xts_data)
class(xts_data)
acf(log(ts_data2))
acf(diff(log(ts_data2)))
acf(diff(log(xts_data)))
(fit <- arima(log(ts_data2), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(ts_data2,2.718^pred$pred, log = "y", lty = c(1,3))
#ts_data2 <- ts(ExchangeUSD$`USD/EUR`, start=c(2011, 10,13), end = c(2013,10,9), frequency = 365)
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 365.25/7, start=decimal_date(ymd("2011-10-13")))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, frequency = 365.25, start=decimal_date(ymd("2011-10-13")))
rates
rates<-ts(ExchangeUSD$`USD/EUR`, start=decimal_date(ymd("2011-10-13")))
rates
plot(rates)
plot(ts_data2)
#Detrend the data
install.packages("forecast")
seasonality_ts_data = ma(ts_data2, order = 250, centre = T)
plot(as.ts(ts_data2))
lines(seasonality_ts_data)
plot(as.ts(seasonality_ts_data))
detrend_ts_data = ts_data2/seasonality_ts_data
detrend_ts_data
plot(as.ts(detrend_ts_data))
detrend_ts_data = ts_data2/seasonality_ts_data
plot(as.ts(detrend_ts_data))
seasonality_xts_data = ma(xts_data, order = 250, centre = T)
detrend_ts_data = ts_data2/seasonality_ts_data
plot(as.ts(detrend_ts_data))
detrend_ts_data
detrend_ts_data = ts_data2-seasonality_ts_data
plot(as.ts(detrend_ts_data))
detrend_ts_data
seasonality_xts_data = ma(xts_data, order = 250, centre = T)
plot(as.ts(xts_data))
lines(seasonality_xts_data)
plot(as.ts(seasonality_xts_data))
detrend_xts_data = xts_data-seasonality_xts_data
plot(as.ts(detrend_xts_data))
plot(as.ts(detrend_xts_data))
detrend_xts_data = xts_data-seasonality_xts_data
frequency_ts_data = ts(ts_data2, frequency = 365)
decompose_data = decompose(ts_data2, "additive")
plot(as.ts(decompose_data$seasonal))
decompose_data = decompose(ts_data2, "additive")
plot(as.ts(decompose_data$seasonal))
plot(as.ts(decompose_data$trend))
plot(as.ts(decompose_data$random))
plot(as.ts(decompose_data$seasonal))
plot(as.ts(decompose_data$trend))
plot(as.ts(decompose_data))
decompose_data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
norm_ts_data <- lapply(ts_data2, normalize)
norm_ts_data
plot(norm_ts_data)
summary(norm_ts_data)
norm_ts_data
head(norm_ts_data)
head(norm_ts_data)
head(norm_ts_data, 7)
norm_ts_data <- sapply(ts_data2, normalize)
norm_ts_data
plot(norm_ts_data))
class(norm_ts_data)
ts_norm_data <- ts(norm_ts_data, start = decimal_date("2011-10-13"))
ts_norm_data <- ts(norm_ts_data, start = decimal_date("2011-10-13"), frequency = 365)
ts_norm_data <- ts(norm_ts_data, start = decimal_date(as.date("2011-10-13")), frequency = 365)
ts_norm_data <- ts(norm_ts_data, start = decimal_date(as.Date("2011-10-13")), frequency = 365)
class(ts_norm_data)
plot(ts_norm_data)
ts_norm_data
#requires matrix component so use xts
p = periodogram(ts_norm_data)
#extract the frequency values
freq_dd = data.frame(freq=p$freq, spec=p$spec)
order = freq_dd[order(-freq_dd$spec),]
top4_freq = head(order, 4)
# display the 4 highest "power" frequencies
top4_freq
#convert to time
freq_time = 1/top4_freq$f
freq_time
#Normalized
frequency_ts_data = ts(ts_data2, frequency = 365)
#Normalized
frequency_ts__normalized_data = ts(ts_data2, frequency = 365)
#Normalized
frequency_ts_normalized_data = ts(ts_data2, frequency = 365)
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 365)
decompose_data = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data))
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 365)
decompose_data_norm = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data_norm))
decompose_data_norm
plot(decompose_data_norm)
plot(ts_norm_data)
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 365)
decompose_data_norm = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data_norm))
decompose_data_norm
plot(decompose_data_norm)
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 250)
decompose_data_norm = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data_norm))
decompose_data_norm
plot(decompose_data_norm)
freq_time
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 250)
decompose_data_norm = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data_norm))
decompose_data_norm
plot(decompose_data_norm)
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 135)
decompose_data_norm = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data_norm))
decompose_data_norm
plot(decompose_data_norm)
#Normalized
frequency_ts_normalized_data = ts(ts_norm_data, frequency = 250)
decompose_data_norm = decompose(ts_norm_data, "additive")
plot(as.ts(decompose_data_norm))
decompose_data_norm
plot(decompose_data_norm)
plot(as.ts(detrend_xts_data))
#Normalized detrenting
#Detrend the data
seasonality_ts_norm_data = ma(ts_norm_data, order = 250, centre = T)
plot(as.ts(ts_norm_data))
lines(seasonality_ts_norm_data)
plot(as.ts(seasonality_ts_norm_data))
detrend_ts_norm_data = ts_data2-seasonality_ts_norm_data
plot(as.ts(detrend_ts_norm_data))
detrend_ts_norm_data
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 20, plot = TRUE)
#head(stepBack)
plot(xts_data)
plot(ts_data)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 20, plot = TRUE)
head(stepBack)
#PREPARE INPUT
stepBack <- acf(ts_data2, lag.max = 20, plot = TRUE)
#PREPARE INPUT
stepBack <- acf(ts_norm_data, lag.max = 20, plot = TRUE)
head(stepBack)
acf(log(xts_data))
acf(log(ts_data2))
acf(diff(log(ts_data2)))
#PREPARE find best lag values
stepBack <- acf(ts_norm_data, lag.max = 20, plot = TRUE)
#PREPARE find best lag values
acf(ts_norm_data, lag.max = 20, plot = TRUE)
acf(log(ts_norm_data))
acf(diff(log(ts_norm_data)))
plot(a)
(
(
#PREPARE find best lag values
a<-acf(ts_norm_data, lag.max = 20, plot = TRUE)
b<-acf(log(ts_norm_data))
c<-acf(diff(log(ts_norm_data)))
plot(a)
plot(b)
plot(c)
#PREPARE find best lag values
a<-acf(ts_norm_data, lag.max = 20, plot = TRUE)
b<-acf(log(ts_norm_data))
c<-acf(diff(log(ts_norm_data)))
plot(a)
plot(b)
plot(c)
input_lag = lag(ts_norm_data, 1)
input_lag
input_lag = lag(ts_norm_data, 1,2)
input_lag
#lagged value up to 5
xts_data  %>%
tk_xts(silent = TRUE) %>%
lag.xts(k = 1:5)
xts_data %>%
lag.xts(k = 1:5)
#lagged value up to 5
plot(xts_data)
xtsnormalize(xtsmat, na.rm = TRUE)
norm_xts <-  normalize(xtsmat, na.rm = TRUE)
norm_xts <-  normalize(xtsmat, na.rm = FALSE)
norm_xts <-  normalize(xtsmat, normalize)
norm_xts <-  normalize(xtsmat, normalise)
xts_data %>%
lag.xts(k = 1:5)
xts_data  %>%
tk_xts(silent = TRUE) %>%
lag.xts(k = 1:5)
install.packages("timetk")
library(timetk)
xts_data  %>%
tk_xts(silent = TRUE) %>%
lag.xts(k = 1:5)
lagged5_xts <- xts_data%>%
tk_xts(silent = TRUE)
my_lagged_time_series_xts5 <-
merge.xts(lagged5_xts, lag.xts(lagged5_xts, k = 1:5))
my_lagged_time_series_xts5
plot(xts_data)
xts_data %>%
lag.xts(k = 1:5)
xts_data  %>%
tk_xts(silent = TRUE) %>%
lag.xts(k = 1:5)
lagged5_xts <- xts_data%>%
tk_xts(silent = TRUE)
lagged5_xts
lagged5_xts <- xts_data%>%
tk_xts(silent = TRUE)
my_lagged_time_series_xts5 <-
merge.xts(lagged5_xts, lag.xts(lagged5_xts, k = 1:5))
my_lagged_time_series_xts5
my_lagged_time_series_xts5 %>%
tk_tbl()
my_lagged_time_series_xts5
#Model fitting
training <- my_lagged_time_series_xts5[1:400]
testing <- my_lagged_time_series_xts5[401:501]
testing <- my_lagged_time_series_xts5[401:500]
??mlp
install.packages("neuralnet")
install.packages("RSNNS")
library(RSNNS)
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
training
testing <- my_lagged_time_series_xts5[401:500]
testing <- xts_data[401:500]
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
training
#Model fitting
training <- my_lagged_time_series_xts5[6:400]
testing <- xts_data[401:500]
training
install.packages("RSNNS")
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
testing <- my_lagged_time_series_xts5[401:500]
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
testing <- my_lagged_time_series_xts5[401:500,2]
training
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
library(RSNNS)
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
#Model fitting
training <- my_lagged_time_series_xts5[1:400]
testing <- my_lagged_time_series_xts5[401:500,2]
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
testing
training
#Model fitting
training <- my_lagged_time_series_xts5[1:400, 2:5]
training
testing <- my_lagged_time_series_xts5[401:500,2]
testing
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
#Model fitting
training <- my_lagged_time_series_xts5[1:400, 1:5]
testing <- my_lagged_time_series_xts5[401:500,2]
training
testing
install.packages("RSNNS")
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1))
#Model fitting
training <- my_lagged_time_series_xts5[1:400]
testing <- my_lagged_time_series_xts5[401:500]
model <- mlp(training, testing, size=c(5), maxit = 500, learnFuncParams = c(0.1),inputsTest = my_lagged_time_series_xts5c(2))
training
model <- mlp(training, my_lagged_time_series_xts5$[1:400,2] , size=c(5), maxit = 500, learnFuncParams = c(0.1),inputsTest = my_lagged_time_series_xts5c(2))
#Model fitting
values <-my_lagged_time_series_xts5[,3:7]
targets <- my_lagged_time_series_xts5[,2]
model_data <- splitForTrainingAndTest(values, targets, ratio=0.20)
#Model fitting
values <-my_lagged_time_series_xts5[,2:6]
targets <- my_lagged_time_series_xts5[,1]
training <- my_lagged_time_series_xts5[1:400]
#Model fitting
values <-my_lagged_time_series_xts5[,2:6]
targets <- my_lagged_time_series_xts5[,1]
model_data <- splitForTrainingAndTest(values, targets, ratio=0.20)
model_data <- normTrainingAndTestSet(model_data)
model <- mlp(model_data$inputsTrain, model_data$targetsTrain, size=c(5), maxit = 500, learnFuncParams = c(0.1),inputsTest = my_lagged_time_series_xts5c(2))
model <- mlp(model_data$inputsTrain, model_data$targetsTrain, size=c(5), maxit = 500, learnFuncParams = c(0.1),inputsTest = my_lagged_time_series_xts5c(2))
model <- mlp(model_data$inputsTrain, model_data$targetsTrain, size=c(5), maxit = 500, learnFuncParams = c(0.1)))
model <- mlp(model_data$inputsTrain, model_data$targetsTrain, size=c(5), maxit = 500, learnFuncParams = c(0.1))
model_data$inputsTrain
model_data$targetsTrain
model_data <- splitForTrainingAndTest(values, targets, ratio=0.20)
model_data <- normTrainingAndTestSet(model_data)
model_data$inputsTrain
model <- mlp(model_data$inputsTrain, model_data$targetsTrain, size=c(5), maxit = 500, learnFuncParams = c(0.1))
#lagged value up to 4
plot(xts_data)
xts_data %>%
lag.xts(k = 1:4)
library(timetk)
xts_data  %>%
tk_xts(silent = TRUE) %>%
lag.xts(k = 1:4)
#convert to xts
lagged4_xts <- xts_data%>%
tk_xts(silent = TRUE)
# Get original values and lags in xts
my_lagged_time_series_xts4 <-
merge.xts(lagged4_xts, lag.xts(lagged4_xts, k = 1:4))
my_lagged_time_series_xts4
plot(xts_data)
xts_data %>%
lag.xts(k = 1:4)
xts_data %>%
lag.xts(k = 1:4)
xts_data  %>%
tk_xts(silent = TRUE) %>%
lag.xts(k = 1:4)
#lagged value up to 4
xts_data %>% lag.xts(k = 1:4)
model_data$inputsTrain
#MODEL2 with 3 hidden layers: 5, 7, 5
#remove missing values
lagged_dates <-na.remove(my_lagged_time_series_xts5)
#load the data
library(readxl)
ExchangeUSD <- read_excel("ExchangeUSD.xlsx")
library(xts)
library(slam)
library(fBasics)
library(quadprog)
library(Rglpk)
library(lubridate)
library(TSA)
library(forecast)
library(timetk)
#reformat
library(tseries)
library(nnet)
library(network)
library(neuralnet)
#MODEL2 with 3 hidden layers: 5, 7, 5
#remove missing values
lagged_dates <-na.remove(my_lagged_time_series_xts5)
my_lagged_time_series_xts5
lagged_dates
rates<-lagged_dates
rates
rates <- rates[sample(1:nrow(rates),length(1:nrow(rates))),1:ncol(rates)]
rates
#prepare input
rateValues <- rates[,2:6]
rateValues
#output
rateTargets <- (rates[,5])
rateTargets
rates <- splitForTrainingAndTest(rateValues, rateTargets, ratio = 0.2)
#fit in model
model2<- mlp(rates$inputsTrain, rates$targetsTrain,inputColumns(1:5), size = c(7,10,5),linOut = T, inputsTest = rates$inputsTest, targetsTest = rates$targetsTest, maxit=400)
library(RSNNS)
#MODEL2 with 3 hidden layers: 5, 7, 5
#remove missing values
lagged_dates <-na.remove(my_lagged_time_series_xts5)
my_lagged_time_series_xts5
lagged_dates
rates<-lagged_dates
rates
rates <- rates[sample(1:nrow(rates),length(1:nrow(rates))),1:ncol(rates)]
rates
#prepare input
rateValues <- rates[,2:6]
rateValues
#output
rateTargets <- (rates[,5])
rateTargets
rates <- splitForTrainingAndTest(rateValues, rateTargets, ratio = 0.2)
#fit in model
model2<- mlp(rates$inputsTrain, rates$targetsTrain, size = c(7,10,5),linOut = T, inputsTest = rates$inputsTest, targetsTest = rates$targetsTest, maxit=400)
results2 <- predict(model2, rates$targetsTest)
results2<-predict(model2, rates$inputsTest)
results
results2
model2
cor(results2, rates$targetsTest)
#fit in model
model<- mlp(rates$inputsTrain, rates$targetsTrain, size = c(10,5), inputsTest = rates$inputsTest, targetsTest = rates$targetsTest)
results <- predict(model, rates$targetsTest)
results
results<-predict(model, rates$inputsTest)
results
cor(results, rates$targetsTest)

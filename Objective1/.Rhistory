ggtheme = theme_minimal())
fviz_cluster(cluster.eq.2, data = data.train,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
#Outliers
boxplot(data.train)
outlier.scores <- lofactor(data.train, k=5)
install.packages("OutlierDetection")
library(OutlierDetection)
outlier.scores <- lofactor(data.train, k=15)
??lofactor
outlier.scores <- lofactor(data.train, k=15)
install.packages("DMwR")
library(DMwR)
outlier.scores <- lofactor(data.train, k=15)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:15]
print(outliers)
outlier.scores <- lofactor(data.train, k=2)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:2]
print(outliers)
summary(row = 57)
outlier.scores <- lofactor(data.train, k=3)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:3]
#sort
outliers <- order(outlier.scores, decreasing=T)[1:3]
print(outliers)
#other outlier method
outlier_values <- boxplot.stats(Whitewine$col=4)$out
#other outlier method
outlier_values <- boxplot.stats(Whitewine$c(4))$out
#other outlier method
outlier_values <- boxplot.stats(Whitewine$re`residual sugar`)$out
#other outlier method
outlier_values <- boxplot.stats(Whitewine$`residual sugar`)$out
boxplot(Whitewine$`residual sugar`, main="Residual Sugar", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
#boxplot column 4
outlier_values <- boxplot.stats(data.train$[c(4)])$out
#boxplot column 4
outlier_values <- boxplot.stats(data.train$[,c(4)])$out
#boxplot column 4
outlier_values <- boxplot.stats(data.train$c(4))$out
#boxplot column 4
outlier_values_col4 <- boxplot.stats(data.train$'residual sugar')$out
outlier_values_col4 <- boxplot.stats(data.train$'residual sugar')
outlier_values_col4 <- boxplot.stats(data.train,c(4))
boxplot(data.train,c(4), main="Residual Sugar", boxwex=0.1)
#boxplot for column 6 "free sulfur dioxide"
outlier_values_col4 <- boxplot.stats(data.train$'free sulfur dioxide')$out
#boxplot for column 6 "free sulfur dioxide"
outlier_values_col6 <- boxplot.stats(Whitewine$'free sulfur dioxide')$out
boxplot(Whitewine$`free sulfur dioxide`, main="Free Sulfur Dioxide", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
#boxplot column 4
outlier_values_col4 <- boxplot.stats(data.train$'residual sugar')$out
#boxplot for column 6 "free sulfur dioxide"
outlier_values_col6 <- boxplot.stats(Whitewine$'free sulfur dioxide')$out
boxplot(Whitewine$`free sulfur dioxide`, main="Free Sulfur Dioxide", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
mtext(paste("Outliers: ", paste(outlier_values)), cex=0.6)
mtext(paste("Outliers: ", paste(outlier_values_col4, collapse=", ")), cex=0.6)
#boxplot column 4
outlier_values_col4 <- boxplot.stats(Whitewine$'residual sugar')$out
boxplot(Whitewine$`residual sugar`, main="Residual Sugar", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values_col4, collapse=", ")), cex=0.6)
#boxplot for column 6 "free sulfur dioxide"
outlier_values_col6 <- boxplot.stats(Whitewine$'free sulfur dioxide')$out
boxplot(Whitewine$`free sulfur dioxide`, main="Free Sulfur Dioxide", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values_col6)), cex=0.6)
mtext(paste("Outliers: ", paste(outlier_values_col6, collapse=", ")), cex=0.6)
boxplot(Whitewine$`free sulfur dioxide`, main="Free Sulfur Dioxide", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values_col6, collapse=", ")), cex=0.6)
#boxplot for column 8 "density"
outlier_values_col8 <- boxplot.stats(Whitewine$'density')$out
boxplot(Whitewine$`density`, main="Density", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values_col8, collapse=", ")), cex=0.6)
str(Whitewine[c(2783)])
head(Whitewine[c(2783)])
head(Whitewine[c(2783)])
print(Whitewine[c(2783)])
print(Whitewine[r(2783)])
print(Whitewine[row(2783)])
outlier.scores <- lofactor(data.train, k=15)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:15]
print(outliers)
outlier.scores <- lofactor(data.train, k=15)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:15]
print(outliers)
outlier.scores <- lofactor(data.train, k=2)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:2]
print(outliers)
#load the data where outliers has been removed
Whitewine <- read_excel("Whitewine_outlierFree.xlsx")
outlier.scores <- lof(data.train, k=c(2:15)
#sort
outliers <- order(outlier.scores, decreasing=T)[1:15]
#sort
outliers <- order(outlier.scores, decreasing=T)[1:15]
print(outliers)
#Scale and remove 12th column
data.withoutOutliers <- scale(Whitewine_outlierFree[-12])
Whitewine <- read_excel("Whitewine.xlsx")
#load the data where outliers has been removed
Whitewine_outlierFree <- read_excel("Whitewine_outlierFree.xlsx")
#Scale and remove 12th column
data.withoutOutliers <- scale(Whitewine_outlierFree[-12])
#NbClust without outliers
set.seed(1234)
nc_noOutliers <- NbClust(data.withoutOutliers,
min.nc=2, max.nc=15,
method="kmeans")
nc_noOutliers <- NbClust(data.withoutOutliers,
min.nc=2, max.nc=15,
method="kmeans")
table(nc_noOutliers.Best[1,])
table(nc_noOutliers$Best.n[1,])
#NbClust without outliers
set.seed(1234)
nc_noOutliers <- NbClust(data.withoutOutliers,
min.nc=2, max.nc=15,
method="kmeans")
nc_noOutliers7 <- NbClust(data.withoutOutliers,
min.nc=2, max.nc=15,
method="kmeans")
nc_noOutliers7 <- NbClust(data.withoutOutliers,
min.nc=2, max.nc=15,
method="kmeans")
set.seed(1234)
nc_noOutliers7 <- NbClust(data.withoutOutliers,
min.nc=2, max.nc=7,
method="kmeans")
#ELBOE - SSE method without outliers
wss_withoutOutliers <- 0
for (i in 1:15){
wss_withoutOutliers[i] <-
sum(kmeans(data.withoutOutliers, centers=i)$withinss)
}
plot(1:15,
wss_withoutOutliers,
type="b",
xlab="Number of Clusters",
ylab="Within groups sum of squares")
#k range 1:7
wss_withoutOutliers7 <- 0
for (i in 1:7){
wss_withoutOutliers7[i] <-
sum(kmeans(data.withoutOutliers, centers=i)$withinss)
}
plot(1:7,
wss_withoutOutliers7,
type="b",
xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(Whitewine)
plot(cont_whitewine[,c(1)])
plot(cont_whitewine[,c(1)])
plot(cont_whitewine[,c(1)])
#the 12th column - labels plot
plot(wineQuality.data)
ty
#plot original labels
plot(wineQuality.data)
#plot with outliers removed
plot(wineQuality_wo)
#the 12th column - labels plot
wineQuality_wo <- Whitewine_outlierFree$quality
#plot with outliers removed
plot(wineQuality_wo)
#Fit the k -means models
set.seed(1234)
fit.km_bestNC <- kmeans(data.train, 2)
fit.km_bestNC
#centers
fit.km_bestNC$centers
fit.km_bestNC$size
#visualisation
library(fpc)
plotcluster(data.train, fit.km$cluster)
plotcluster(data.train, fit.km_bestNC$cluster)
#Best number of clusters k = 4 (with outliers)
set.seed(1234)
fit.km_bestNC4 <- kmeans(data.train, 4)
fit.km_bestNC4
#visualisation
plotcluster(data.train, fit.km_bestNC4$cluster)
#Best number of clusters k = 2 (without outliers)
set.seed(1234)
fit.km_bestNC_noOutliers <- kmeans(data.withoutOutliers, 2)
fit.km_bestNC_noOutliers
#visualisation
plotcluster(data.withoutOutliers, fit.km_bestNC_noOutliers$cluster)
#Best number of clusters k = 5 (without outliers)
set.seed(1234)
fit.km_bestNC_noOutliers5 <- kmeans(data.withoutOutliers, 5)
fit.km_bestNC_noOutliers5
#visualisation
plotcluster(data.withoutOutliers, fit.km_bestNC_noOutliers5$cluster)
#visualisation
plotcluster(data.withoutOutliers, fit.km_bestNC_noOutliers5$cluster)
#Best number of clusters k = 5 (without outliers)
set.seed(1234)
fit.km_bestNC_noOutliers5 <- kmeans(data.withoutOutliers, 5)
fit.km_bestNC_noOutliers5
#visualisation
plotcluster(data.withoutOutliers, fit.km_bestNC_noOutliers5$cluster)
confuseTable.km_2 <- table(wineQuality.data$quality, fit.km_bestNC$cluster)
confuseTable.km_2 <- table(Whitewine$quality, fit.km_bestNC$cluster)
confuseTable.km_2
confuseTable.km_4<- table(Whitewine$quality, fit.km_bestNC4$cluster)
confuseTable.km_4
confuseTable.km_noO2<- table(Whitewine_outlierFree$quality, fit.km_bestNC_noOutliers$cluster)
confuseTable.km_noO2
confuseTable.km_noO5<- table(Whitewine_outlierFree$quality, fit.km_bestNC_noOutliers5$cluster)
confuseTable.km_noO5
#calculate mean of each attribute
aggregate(Whitewine_outlierFree, by=list(cluster=fit.km_bestNC_noOutliers$cluster), mean)
#load the data
library(readxl)
ExchangeUSD <- read_excel("ExchangeUSD.xlsx")
plot(ExchangeUSD)
ExchangeUSD <- read_excel("ExchangeUSD.xlsx")
library(readxl)
ExchangeUSD <- read_excel("C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Objective2/ExchangeUSD.xlsx")
View(ExchangeUSD)
plot(ExchangeUSD)
#library(xts)
#exchangeUSD_xts <- as.xts(ExchangeUSD)
install.packages("rmetrics")
install.packages(c("quadprog","Rglpk","fBasics"), repos = "http://cran.r-project.org")
update.packages()
library("slam")
library(fBasics)
library(quadprog)
library(Rglpk)
dates <- date(("2013-10-09"):(n-1))
ts_data <- alignDailySeries(x=ExchangeUSD$`USD/EUR`,by="1d",method = "before", inclinclude.weekends = FALSE)
ts_data <- alignDailySeries(x=ExchangeUSD$`USD/EUR`,by="1d",method = "before", include.weekends = FALSE)
ts_data <- alignDailySeries(x=ExchangeUSD$`USD/EUR`,by="1d",method = "before", include.weekends = FALSE)
?nnumeric
??nnumeric
??numeric
#create date as a separate vector
date <- as.Date(ExchangeUSD$`YYYY/MM/DD`,"%d/%m/%y")
#turn it into understandable format
fix(date)
#turn it into understandable format
ts_date <- fix(date)
ts_date
ts_data = as.timeSeries(ExchangeUSD$`USD/EUR`, ts_date)
ts_data
ts_data["2011-10-13"]
ts_data["2011-10-13",]
plot(ts_data)
Summary(ts_data)
summary(ts_data)
ts_data2 <- alignDailySeries(x=ts_date,by="1d",method = "before", include.weekends = FALSE)
usd <- ExchangeUSD$`USD/EUR`
ts_data2 <- alignDailySeries(x=usd,by="1d",method = "before", include.weekends = FALSE)
ts_data2 <- alignDailySeries(x=ts_data,by="1d",method = "before", include.weekends = FALSE)
usd <- ExchangeUSD$`USD/EUR`
names(usd) <- ts_date
usd
xts_data <- as.xts(usd)
??xts
library(xts)
xts_data <- as.xts(usd)
View(xts_data)
View(xts_data)
plot(xts)
plot(xts_data)
plot(ts_data)
plot(xts_data)
adf.test(xts_data)
??adf.test
#ts_data2 <- alignDailySeries(x=usd,by="1d",method = "before", include.weekends = FALSE)
#??numeric
#format the data
# install.packages('timeDate')
require(timeDate)
adf.test(xts_data)
test
??adf.test
install.packages("tseries")
library(tseries)
adf.test(xts_data)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(xts_data,model = list(order = c(0,0,2), ma = c(0.5,0.3)))+1.35
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(xts_data,model = list(order = c(0,0,2), ma = c(0.5,0.3)))+500
acf(MA2)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(ts_data,model = list(order = c(0,0,2), ma = c(0.5,0.3)))+500
acf(MA2)
plot(MA2)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(ts_data,model = list(order = c(0,0,2), ma = c(1,1)))+500
plot(MA2)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(ts_data,model = list(order = c(0,0,2), ma = c(1,1)))+100
plot(MA2)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(ts_data,model = list(order = c(0,0,2), ma = c(1,1)))+500
plot(MA2)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(ts_data,model = list(order = c(0,0,2), ma = c(0.5,0.3)))+500
plot(MA2)
#get best lag values
#moving average with 2 lags
MA2 <- arima.sim(ts_data,model = list(order = c(0,0,2), ma = c(1,1)))+500
plot(MA2)
adf.test(ts_data)
ADF <- adf.test(ts_data)
ADF
xts_data
head(xts_data)
head(ts_data)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 1, plot = FALSE)
head(stepBack)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 1, plot = TRUE)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 365, plot = TRUE)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 500, plot = TRUE)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 100, plot = TRUE)
head(stepBack)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 10, plot = TRUE)
#PREPARE INPUT
stepBack <- acf(ts_data, lag.max = 20, plot = TRUE)
head(stepBack)
cycle(ts_data)
plot(aggregate(ts_data,FUN=mean))
plot(aggregate(xts_data,FUN=mean))
#Detrend the data
install.packages("forecast")
trend_ts__data = ma(ts_data, order = 365.25, centre = T)
library(forecast)
trend_ts__data = ma(ts_data, order = 365.25, centre = T)
plot(as.ts(trend_ts__data))
trend_ts__data = ma(ts_data, order = 365, centre = T)
plot(as.ts(trend_ts__data))
trend_ts__data = ma(ts_data, order = 1, centre = T)
plot(as.ts(trend_ts__data))
plot(as.ts(trend_ts_data))
trend_ts_data = ma(ts_data, order = 1, centre = T)
plot(as.ts(trend_ts_data))
#Detect the trend
install.packages("TSA")
library(TSA)
# compute the Fourier Transform
p = periodogram(ts_data)
# compute the Fourier Transform
p = periodogram(xts_data)
# compute the Fourier Transform
#p = periodogram(ts_data)
#requires matrix component so use xts
p = periodogram(xts_data)
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Objective2/script2.R', encoding = 'UTF-8')
# compute the Fourier Transform
#p = periodogram(ts_data)
#requires matrix component so use xts
p = periodogram(xts_data)
#load the data
library(readxl)
ExchangeUSD <- read_excel("ExchangeUSD.xlsx")
ExchangeUSD <- read_excel("ExchangeUSD.xlsx")
library(readxl)
ExchangeUSD <- read_excel("C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Objective2/ExchangeUSD.xlsx")
View(ExchangeUSD)
#library(xts)
#exchangeUSD_xts <- as.xts(ExchangeUSD)
install.packages("rmetrics")
install.packages(c("quadprog","Rglpk","fBasics"), repos = "http://cran.r-project.org")
update.packages()
install.packages("slam")
library("slam")
library(fBasics)
library(quadprog)
library(Rglpk)
#create date as a separate vector
date <- as.Date(ExchangeUSD$`YYYY/MM/DD`,"%d/%m/%y")
#turn date into understandable format
ts_date <- fix(date)
ts_date
#combine exchange rate and date to timeSeries data
ts_data = as.timeSeries(ExchangeUSD$`USD/EUR`, ts_date)
ts_data
#view specific day
ts_data["2011-10-13",]
plot(ts_data)
summary(ts_data)
#another time series data format XTS
usd <- ExchangeUSD$`USD/EUR`
names(usd) <- ts_date
xts_data <- as.xts(usd)
library(xts)
names(usd) <- ts_date
xts_data <- as.xts(usd)
plot(xts_data)
#test if data is stationary
install.packages("tseries")
library(tseries)
adf.test(xts_data)
head(xts_data)
head(ts_data)
#Detect the trend using Fourier Transforms
install.packages("TSA")
library(TSA)
library(TSA)
# compute the Fourier Transform
#p = periodogram(ts_data)
#requires matrix component so use xts
p = periodogram(xts_data)
freq_dd = data.frame(freq=p$freq, spec=p$spec)
order = dd[order(-dd$spec),]
order = freq_dd[order(-freq_dd$spec),]
top2_freq = head(order, 2)
# display the 2 highest "power" frequencies
top2
# display the 2 highest "power" frequencies
top2_freq
top2_freq = head(order, 4)
# display the 2 highest "power" frequencies
top2_freq
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/New folder/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
# display the 2 highest "power" frequencies
top2_freq
#convert to time
freq_time = 1/top2$f
#convert to time
freq_time = 1/top2_freq$f
freq_time
top2_freq = head(order, 2)
# display the 2 highest "power" frequencies
top2_freq
#convert to time
freq_time = 1/top2_freq$f
freq_time
# display the 2 highest "power" frequencies
top2_freq
# compute the Fourier Transform
#p = periodogram(ts_data)
#requires matrix component so use xts
p = periodogram(xts_data)
order = freq_dd[order(-freq_dd$spec),]
top4_freq = head(order, 4)
# display the 2 highest "power" frequencies
top4_freq
#convert to time
freq_time = 1/top4_freq$f
freq_time
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Forecasting/script2.R', encoding = 'UTF-8')
source('C:/Users/ladyg/Desktop/University/Year 3/Business Intelligence/Coursework/Objective1/Partitioning clustering.R')
install.packages("NbClust")
library(NbClust)
library(readxl)
Whitewine <- read_excel("Whitewine.xlsx")
head(Whitewine, n = 3)
#remove missing values
Whitewine <- na.omit(Whitewine)
#overview data
summary(Whitewine)
#data types
head(Whitewine)
str(Whitewine)
#changing data to continuous
cont_whitewine <- as.matrix(Whitewine)
head(cont_whitewine, n = 3)
str(cont_whitewine)
summary(cont_whitewine)
plot(cont_whitewine[,c(1)])
#Scaling
#data without the 12th column scaled
data.train <- scale(Whitewine[-12])
summary(data.train)
#the 12th column data
wineQuality.data = Whitewine$quality
str(wineQuality.data)
plot(wineQuality.data)
#Determination of the best number of clusters
#NbClust method
library(factoextra)
library(NbClust)
# up to 15 clusters
set.seed(1234)
nc15 <- NbClust(data.train,
min.nc=2, max.nc=15,
method="kmeans")
